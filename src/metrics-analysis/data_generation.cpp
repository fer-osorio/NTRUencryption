#include"../../include/metrics-analysis/data_generation.hpp"

std::vector<std::byte> DataGeneration::dataSource(std::function<std::byte (size_t)> generator, size_t size){
    std::vector<std::byte> data(size);
    for(size_t i = 0; i < size; i++) data[i] = generator(i);
    return data;
}

std::vector<std::byte> DataGeneration::simpleDataSource(size_t size){
    return dataSource(
        [](size_t i) ->std::byte {
            size_t FF = 0xFF, q = (i & ~FF)>>8, r = i & FF;                     // i = 256Â·q + r
            return std::byte((q+r) & FF);                                       // (q+i) % 256
        }
        ,size);
}


/*int main(int argc, const char* argv[]){
    std::vector<char> char_arr_01 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B, 0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};
    std::vector<char> char_arr_02 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x1B,-0x02,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};
    std::vector<char> char_arr_11 = {0x7F,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B, 0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};
    std::vector<char> char_arr_12 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x1B,-0x02,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};

    std::vector<short> short_arr_1 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,-0x14,0x15, 0x16,0x17,0x18};
    std::vector<short> short_arr_2 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13, 0x14,0x15,-0x16,0x17,0x18};
    std::vector<int> int_arr_1 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0xFFFF,0x0E,0x0F, 0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};
    std::vector<int> int_arr_2 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x1B,0x0C,0x0D,  0x0E,0x0F,-0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};

    std::cout << "\nBinary: bits amount = " << NumberBaseTwosPower::max_bit_amount(NumberBaseTwosPower::Base::BINARY);
    printf("; upper bits: %X\n", (unsigned int)NumberBaseTwosPower::to_upper_bits(NumberBaseTwosPower::Base::BINARY));
    std::cout << "Quaternary: bits amount = " << NumberBaseTwosPower::max_bit_amount(NumberBaseTwosPower::Base::QUATERNARY);
    printf("; upper bits: %X\n\n", (unsigned int)NumberBaseTwosPower::to_upper_bits(NumberBaseTwosPower::Base::QUATERNARY));

    print_first_difference(char_arr_01, char_arr_02, "Vectors are diferent", "char_arr_01: ", "char_arr_02: ", 13);
    std::cout << std::endl;
    print_first_difference(char_arr_11, char_arr_12, "Vectors are diferent", "char_arr_11: ", "char_array_12: ", 18);
    std::cout << std::endl;

    print_slice_centered(short_arr_1, 22, 5, NumberBaseTwosPower::Base::BINARY);
    std::cout << std::endl;
    print_slice_centered(short_arr_1, 22, 8, NumberBaseTwosPower::Base::QUATERNARY);
    std::cout << std::endl;
    print_slice_centered(short_arr_2, 22, 8, NumberBaseTwosPower::Base::OCTAL);
    std::cout << std::endl;

    print_slice_centered(int_arr_1, 13, 9, NumberBaseTwosPower::Base::OCTAL);
    std::cout << std::endl;
    print_slice_centered(int_arr_2, 13, 9, NumberBaseTwosPower::Base::OCTAL);
    std::cout << std::endl;

    return 0;
}*/
